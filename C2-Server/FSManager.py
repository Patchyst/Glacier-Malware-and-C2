import os
import shutil
from io import BytesIO
from sys import platform
from Encryption import encrypt_bstr

class FSManager:
    def __init__(self, root_dir, encrypt_data=False):
        self.root_dir = root_dir
        self.cluster_dir = root_dir+"/cluster"
        self.encrypt_data = encrypt_data

    # add fs_add_agent function
    def fs_configure_system(self):
        if not os.path.exists(self.root_dir):
            os.mkdir(self.root_dir)
        if not os.path.exists(self.cluster_dir):
            os.mkdir(self.cluster_dir)

    def fs_delete_agent(self, agentName): # recursive function
        # remove agent from the file system
        agentPath = self.cluster_dir+"/"+agentName+"/"
        if(os.path.exists(agentPath)):
            shutil.rmtree(agentPath)
        else:
            print(agentName+" does not exist within the C2 file system")
    
    def fs_add_agent(self, agentName):
        agent_dir = self.cluster_dir+"/"+agentName
        if not os.path.exists(agent_dir):
            os.mkdir(agent_dir)
        f = open(agent_dir+"/payloads", "wb+")
        f.close()
        self.fs_init_task_file(agentName)
        if not os.path.exists(agent_dir+"/uploads/"):
            os.mkdir(agent_dir+"/uploads/")
        if not os.path.exists(agent_dir+"/downloads/"):
            os.mkdir(agent_dir+"/downloads/")
        if not os.path.exists(agent_dir+"/results/"):
            os.mkdir(agent_dir+"/results/")
        lf = open(agent_dir+"/results/results_log", "w+")
        lf.close()

    def fs_get_agent_task(self, agent_name):
        payload_path = self.cluster_dir+"/"+agent_name+"/payloads"
        f  = open(payload_path, "rb")
        payload = f.read()
        f.close()
        return BytesIO(payload)

    def fs_completed_task(self, agent_name):
            payload_path = self.cluster_dir+"/"+agent_name+"/payloads"
            payload = b""
            base_key = agent_name[6:12]
            with open(payload_path, "rb") as f:
                if(self.encrypt_data):
                    payload = encrypt_bstr(base_key, f.read())
                else:
                    payload = f.read()
            pList = list(payload.decode("utf-8"))
            aList = payload.decode("utf-8").split("\n")
            pList[1] = b'\x01'.decode("utf-8")
            fin_task = "".join(pList).encode("utf-8")
            with open(payload_path, "rb") as f:
                if(self.encrypt_data):
                    pType = encrypt_bstr(base_key, f.readline(1))
                else:
                    pType = f.readline(1) 
            with open(payload_path, "wb") as f:
                if(self.encrypt_data):
                    f.write(encrypt_bstr(base_key, fin_task))
                else:
                    f.write(fin_task)
            return pType, aList
    
    def fs_file_upload(self, filepath, agentName):
        if platform == "win32":
            fileName = filepath.split("\\")[-1]
        else:
            fileName = filepath.split("/")[-1]
        upload_path = self.cluster_dir+"/"+agentName+"/uploads/"
        if len(os.listdir(upload_path)) > 0:
            for fname in os.listdir(upload_path):
                os.remove(upload_path+fname)
        upload_file = upload_path+fileName
        bin_data = b""
        with open(filepath, "rb") as f:
            bin_data = f.read()
        with open(upload_file, "wb+") as f:
            if(self.encrypt_data):
                f.write(encrypt_bstr(agentName[6:12], bin_data))
            else:
                f.write(bin_data)
    
    def fs_get_file_upload(self, agent_name):
        upload_path = self.cluster_dir+"/"+agent_name+"/uploads/"
        if(len(os.listdir(upload_path)) == 1):
            fname = os.listdir(upload_path)[0]
            f  = open(upload_path+fname, "rb")
            payload = f.read()
            f.close()
            return BytesIO(payload)
        else:
            return None

    def fs_write_download(self, bin_data, file_name, agent_name):
        download_path = self.cluster_dir+"/"+agent_name+"/downloads/"
        with open(download_path+file_name, "wb+") as f:
            if(self.encrypt_data):
                f.write(encrypt_bstr(agent_name[6:12], bin_data))
            else:
                f.write(bin_data)

    def fs_write_log(self, data, agent_name):
        results_path = self.cluster_dir+"/"+agent_name+"/results/results_log"
        lf = open(results_path, "w")
        if(self.encrypt_data):
            lf.write(encrypt_bstr(agent_name[6:12], data))
        else:
            lf.write(data)
        lf.close()

    def fs_write_generic_task(self, agent_name, pType, gen_args):
        task_path = self.cluster_dir+"/"+agent_name+"/payloads"
        data_arr = bytearray()
        with open(task_path, "wb") as f:
            data_arr.append(pType)
            data_arr.append(0)
            data_arr.append(0)
            data_arr.append(0x0a)
            for arg in gen_args:
                for b in bytearray(arg.encode("utf-8")):
                    data_arr.append(b)
                data_arr.append(0x0a)
            if(self.encrypt_data):
                base_key = agent_name[6:12]
                f.write(encrypt_bstr(base_key, bytes(data_arr)))
            else:
                f.write(bytes(data_arr))
    
    def fs_init_task_file(self, agent_name):
        task_path = self.cluster_dir+"/"+agent_name+"/payloads"
        data_arr = bytearray()
        with open(task_path, "wb") as f:
            data_arr.append(0x07)
            data_arr.append(0x1)
            data_arr.append(0x1)
            data_arr.append(0x0a)
            if(self.encrypt_data):
                base_key = agent_name[6:12]
                f.write(encrypt_bstr(base_key, bytes(data_arr)))
            else:
                f.write(bytes(data_arr))
    

